/**
 * This file was automatically generated by Stylus and represents a Rust program.
 * For more information, please see [The Stylus SDK](https://github.com/OffchainLabs/stylus-sdk-rs).
 */

interface IAuctionContract {
    function owner() external view returns (string memory);

    function startAuction(address token_contract, uint256 token_id, uint256 start_price, uint256 expected_price, uint256 start_time, uint256 end_time) external;

    function getContractOfAuction(uint256 auction_id) external view returns (address);

    function getTokenIdOfAuction(uint256 auction_id) external view returns (uint256);

    function getHighestBiderIdOfAuction(uint256 auction_id) external view returns (uint256);

    function getCurrentPrice(uint256 auction_id) external view returns (uint256);

    function getEndtimeAuction(uint256 auction_id) external view returns (uint256);

    function placeBid(uint256 auction_id) external payable;

    function endAuction(uint256 auction_id) external;

    function withdraw(uint256 auction_id) external;

    function bidderBalance(uint256 auction_id, address _address) external view returns (uint256);

    function getAuctionId() external view returns (uint256);

    function getContractAddress() external view returns (address);
}

interface IUranus is IAuctionContract {
    function getOwner() external view returns (string memory);
}
